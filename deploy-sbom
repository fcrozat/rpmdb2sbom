#!/bin/bash

SUBVOLS="
	.snapshots
	boot/grub2/i386-pc
	boot/grub2/x86_64-efi
	boot/writable
	home
	opt
	root
	srv
	usr/local
	var
"

# Missing packages:
#	firmwares (maybe using -all?)
# 	ucode-amd/ucode-intel
# 	xf86-video-r128/intel, VM/Guest-tools
# This stuff is decided during yast installation.

TMPMNT=$(mktemp -d)
RUNDATE=$(date '+%Y-%m-%d %T')
GREEN='\033[1m\033[32m'
YELLOW='\033[1m\033[33m'
RED='\033[1m\033[31m'
CLEAR='\033[0m'

print_yellow() {
	printf "${YELLOW}"
	printf "%s\n" "$@"
	printf "${CLEAR}"
}

print_green() {
	printf "${GREEN}"
	printf "%s\n" "$@"
	printf "${CLEAR}"
}

print_red() {
	printf "${RED}"
	printf "%s\n" "$@"
	printf "${CLEAR}"
}

[ -r /etc/os-release ] && . /etc/os-release
if [ "${ID%%[ ]*}" != "sle-micro" ]; then
	print_red "This script is only for SLE Micro"
	exit
fi

if [ "$EUID" -ne 0 ]; then
	sudo "$0" "$@"
	exit
fi

print_red "This is a prototype script that may do terrible things to your system, you have been warned"
read -p "Do you want to continue? (yes/no) " yn
case $yn in
	yes) print_green "OK" ;;
	no)
		echo exiting...
		exit
		;;
	*)
		echo invalid response
		exit 1
		;;
esac

print_yellow "DEMO: Create SBOM deployment in fresh subvolume. Fool tukit/snapper into thinking its a valid snapshot"

# Create snapshot
LATESTSNAP=$(tukit -q snapshots | tail -n1)
WORKSNAP=$((LATESTSNAP + 1))
mkdir /.snapshots/$WORKSNAP
btrfs subvolume create /.snapshots/$WORKSNAP/snapshot

mkdir -p /.snapshots/$WORKSNAP/snapshot/boot/writable
mkdir -p /.snapshots/$WORKSNAP/snapshot/.snapshots

# Create dummy snapper XML
cat << EOF > /.snapshots/$WORKSNAP/info.xml
<?xml version="1.0"?>
<snapshot>
  <type>single</type>
  <num>$WORKSNAP</num>
  <date>$RUNDATE</date>
  <description>SBOM deployment</description>
  <userdata>
    <key>transactional-update-in-progress</key>
    <value>yes</value>
  </userdata>
</snapshot>
EOF

systemctl restart snapperd

print_red "DEBUG: Deploying SBOM based install to $WORKSNAP"

PACKAGES=$(jq -r '.components[] | select((.type| contains("library")) and (.name | contains ("gpg-pubkey") | not) ) | .name + "-" + .version' $1)

# Copy SUSEConnect registration
mkdir -p /.snapshots/$WORKSNAP/snapshot/etc/zypp/{credentials.d,services.d}

cp /etc/SUSEConnect /.snapshots/$WORKSNAP/snapshot/etc/
cp /etc/zypp/credentials.d/* /.snapshots/$WORKSNAP/snapshot/etc/zypp/credentials.d/
cp /etc/zypp/services.d/* /.snapshots/$WORKSNAP/snapshot/etc/zypp/services.d
zypper --gpg-auto-import-keys --root /.snapshots/$WORKSNAP/snapshot ref -s -f
ZYPP_SINGLE_RPMTRANS=1 zypper --root /.snapshots/$WORKSNAP/snapshot in $PACKAGES

# Grab current fstab, except for last overlay mount
fstab_content="$(cat /etc/fstab | head -n -1)"

# backup original fstab
cp /.snapshots/$WORKSNAP/snapshot/etc/fstab /.snapshots/$WORKSNAP/snapshot/etc/fstab.bak

# Create new fstab with current layout, and new overlay mount
echo "$fstab_content" > /.snapshots/$WORKSNAP/snapshot/etc/fstab
cat /.snapshots/$WORKSNAP/snapshot/etc/fstab.bak >> /.snapshots/$WORKSNAP/snapshot/etc/fstab

systemctl restart snapperd

cp -r /boot/grub2/* /.snapshots/$WORKSNAP/snapshot/boot/grub2/


# Now we set up the boot correctly, tukit call enables us to launch commands in
# an existing snapshot
/usr/sbin/tukit call $WORKSNAP dracut --force --regenerate-all
/usr/sbin/tukit call $WORKSNAP /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
/usr/sbin/tukit call $WORKSNAP chcon --reference /boot/grub2/grub.cfg  /.snapshots/$WORKSNAP/snapshot/boot/grub2/grub.cfg
/usr/sbin/tukit call $WORKSNAP /sbin/pbl --install

# Missing piece, this will make the snapshot actually bootable
/usr/lib/snapper/plugins/grub --enable $WORKSNAP

/usr/sbin/tukit close $WORKSNAP


#TODO - cleanup in case of abort/error
#TODO - edit etc/fstab to look like a regular t-u snapshots one
#TODO - populate etc/fstab with etc/fstab from the existing host
#TODO - delete var/lib/overlay/1
